/*/////////////////////////////////////////////////////////////////////////
                        Assignment 6 - Milestone 2
Full Name  : Chia-Yu Chien
Student ID#: 157049222
Email      : cchien8@myseneca.ca
Section    : NCC

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/

From this workshop, I learned how to define and implement copy constructor. Implementing copy constructor ensures to have deep copy resources of the given class. The is very important concept of managing dynamic memory property. This reinforced my understanding of OOP and dynamic memory management in C++. Besides that, I also implemented copy assignment operators to handle dynamic memory assignment. This can ensure no shallow copies occur. Copy constructor and copy assignment is new concept for me, because most of programming languages that I’ve learned don’t bother to handle this details.

Also, I implemented delete copy constructor and assignment for Line class in TextFile.h. I used that to explicitly prevent copying and assignment to make sure Line class cannot  be copied or assigned to another. Take a example from my workshop,

```cpp
  Line& operator=(const Line&) = delete;
  Line(const Line&) = delete;
```

This taught me how to control object and class to maintain class integrity.

Second, I overloaded the insertion operator and extraction operator to enable easy and intuitive I/O operation. Take a example from my workshop, 

```cpp
 std::ostream& operator<<(std::ostream& ostr, const TextFile& text){
    text.view(ostr);
    return ostr;
 }

 std::istream& operator>>(std::istream& istr, TextFile& text){
    text.getFile(istr);
    return istr;
 }
```

This practice enhanced my skill and understanding of stream manipulation in C++. I knew I can use these operator overloading to provide better API of classes. 

Moreover, I used `ifstream` and `ofstream` to access file and make some basic I/O operations. Take a look at my example,

```cpp
 void TextFile::saveAs(const char *fileName)const {
    if(fileName == nullptr) {
       return;
    }

    ofstream fon;
    fon.open(fileName);
    if(fon.is_open()){
       for(int i = 0; i < m_noOfLines; i++) {
          fon << m_textLines[i] << "\n";
       }
       fon.close();
    }
 }
```

This function first initializes and opens a file, and then write multiple lines of data into this file. I can directly use both to simplify  I/O operation in my C++ codebase. This practice deepened my understanding of stream manipulation in C++. 

Also, I used `string` class in my workshop. Built-in `string` class provides a very dynamic and flexible API to access string. Compared with that, cstring are very primitive and unsafe.  `string` solves problems of cstring. Take a example to demonstrate,

```cpp
 std::istream& TextFile::getFile(std::istream& istr){
    string fname;
    istr >> fname;
    clearInputBuffer();
    setFilename(fname.c_str());
    setNoOfLines();
    loadText();

    return istr;
 } 
```

I used string to extract an unknown number of characters from the input stream. If I reimplement this through cstring, that would be much complicated and might lead to bugs.

In summary, I learned many ideas of C++ from this workshop . It enhanced my understanding and practical skills. I learned to use copy constructors and assignment, and I also used insertion and extract operator in my workshop. This pushed me to dive deep into the world of  programming language.