Upon successfully completing this workshop, I learned to implement function templates in C++. 
I learned how to define function templates and allow functions to receive generic parameters. 
Function templates allow me to only implement `search` function once. Then let the function 
receives multiple classes, such as `Car` , `Employee` and `Student` , as parameters. This can 
enhance the flexibility and reusability of my code. 

Take the give code as example:

```cpp
// seach function that searches an array for a key and stores the matches in a collection.
// 
// note template T1 must be able to compare with T2
template <typename T1, typename T2>
bool search(Collection<T1> &collection, const T1 arr[], int size, T2 key) {
  bool found = false;
  for (int i = 0; i < size; i++) {
    if (arr[i] == key) {
      found = true;
      collection.add(arr[i]);
    }
  }
  return found;
}

// listArrayElements function that lists all the elements in an array
// the title is printed first, then each element is printed with its index and a colon in front 
of it.
// 
// note T1 must have operator<< overloaded
template <typename T1>
void listArrayElements(const char *title, const T1 arr[], int size) {
  std::cout << title << std::endl;
  for (int i = 0; i < size; i++) {
    std::cout << i + 1 << ": " << arr[i] << std::endl;
  }
}
```

I also practiced how to call these function with actual data types and values in `main.cpp` file. 
I learned how to pass different types of arguments to function templates. C++ can handle it based 
on the arguments types provided.

Overall, I created flexible functions that are not tied to specific data types. They allow me to 
have a code that is easier to maintain. Also, I was informed the importance to make ensure those 
template arguments correctly implement necessary functions, such as `operator==` and `operator<<`.